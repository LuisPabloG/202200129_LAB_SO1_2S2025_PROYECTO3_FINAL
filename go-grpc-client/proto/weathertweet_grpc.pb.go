// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeatherTweetServiceClient is the client API for WeatherTweetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeatherTweetServiceClient interface {
	SendTweet(ctx context.Context, in *WeatherTweetRequest, opts ...grpc.CallOption) (*WeatherTweetResponse, error)
}

type weatherTweetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWeatherTweetServiceClient(cc grpc.ClientConnInterface) WeatherTweetServiceClient {
	return &weatherTweetServiceClient{cc}
}

func (c *weatherTweetServiceClient) SendTweet(ctx context.Context, in *WeatherTweetRequest, opts ...grpc.CallOption) (*WeatherTweetResponse, error) {
	out := new(WeatherTweetResponse)
	err := c.cc.Invoke(ctx, "/weathertweet.WeatherTweetService/SendTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeatherTweetServiceServer is the server API for WeatherTweetService service.
// All implementations must embed UnimplementedWeatherTweetServiceServer
// for forward compatibility
type WeatherTweetServiceServer interface {
	SendTweet(context.Context, *WeatherTweetRequest) (*WeatherTweetResponse, error)
	mustEmbedUnimplementedWeatherTweetServiceServer()
}

// UnimplementedWeatherTweetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWeatherTweetServiceServer struct {
}

func (UnimplementedWeatherTweetServiceServer) SendTweet(context.Context, *WeatherTweetRequest) (*WeatherTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTweet not implemented")
}
func (UnimplementedWeatherTweetServiceServer) mustEmbedUnimplementedWeatherTweetServiceServer() {}

// UnsafeWeatherTweetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeatherTweetServiceServer will
// result in compilation errors.
type UnsafeWeatherTweetServiceServer interface {
	mustEmbedUnimplementedWeatherTweetServiceServer()
}

func RegisterWeatherTweetServiceServer(s grpc.ServiceRegistrar, srv WeatherTweetServiceServer) {
	s.RegisterService(&WeatherTweetService_ServiceDesc, srv)
}

func _WeatherTweetService_SendTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeatherTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherTweetServiceServer).SendTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weathertweet.WeatherTweetService/SendTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherTweetServiceServer).SendTweet(ctx, req.(*WeatherTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WeatherTweetService_ServiceDesc is the grpc.ServiceDesc for WeatherTweetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeatherTweetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weathertweet.WeatherTweetService",
	HandlerType: (*WeatherTweetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTweet",
			Handler:    _WeatherTweetService_SendTweet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/weathertweet.proto",
}
